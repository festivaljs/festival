{"version":3,"file":"festival.esm.js","sources":["../data-processor.js","../query-engine.js","../cache-manager.js","../festival.js","../index.js"],"sourcesContent":["/**\n * 数据预处理器 - 优化数据结构以提升查询性能\n */\n\nimport holiday from './chn/holiday.json' with { type: 'json' }\nimport legal from './chn/legal.json' with { type: 'json' }\nimport swap from './chn/swap.json' with { type: 'json' }\n\nclass DataProcessor {\n  constructor() {\n    this.processedData = this.preprocessData()\n  }\n\n  /**\n   * 预处理数据，构建高效的查询索引\n   */\n  preprocessData() {\n    // 构建快速查询的Set结构\n    const holidaySet = new Set(Object.keys(holiday).map(Number))\n    const legalSet = new Set(legal.map(Number))\n    const swapSet = new Set(swap.map(Number))\n    \n    // 按年份组织数据，提升范围查询性能\n    const yearlyData = this.buildYearlyIndex(holiday, legal, swap)\n    \n    // 计算数据边界\n    const allDates = [...holidaySet, ...legalSet, ...swapSet]\n    const dataRange = {\n      minDate: Math.min(...allDates),\n      maxDate: Math.max(...allDates),\n      years: this.extractYears(allDates)\n    }\n\n    return {\n      // 原始查询集合\n      holidayMap: new Map(Object.entries(holiday).map(([date, name]) => [Number(date), name])),\n      holidaySet,\n      legalSet,\n      swapSet,\n      \n      // 优化索引\n      yearlyData,\n      dataRange,\n      \n      // 元数据\n      metadata: this.generateMetadata(allDates)\n    }\n  }\n\n  /**\n   * 按年份构建索引，优化年度范围查询\n   */\n  buildYearlyIndex(holiday, legal, swap) {\n    const yearlyData = new Map()\n    \n    // 处理节假日\n    Object.entries(holiday).forEach(([dateStr, name]) => {\n      const date = Number(dateStr)\n      const year = Math.floor(date / 10000)\n      \n      if (!yearlyData.has(year)) {\n        yearlyData.set(year, {\n          holidays: new Map(),\n          legal: new Set(),\n          swap: new Set()\n        })\n      }\n      \n      yearlyData.get(year).holidays.set(date, name)\n    })\n    \n    // 处理法定节假日\n    legal.forEach(date => {\n      const year = Math.floor(date / 10000)\n      if (yearlyData.has(year)) {\n        yearlyData.get(year).legal.add(date)\n      }\n    })\n    \n    // 处理调休日\n    swap.forEach(date => {\n      const year = Math.floor(date / 10000)\n      if (yearlyData.has(year)) {\n        yearlyData.get(year).swap.add(date)\n      }\n    })\n    \n    return yearlyData\n  }\n\n  /**\n   * 提取所有涉及的年份\n   */\n  extractYears(dates) {\n    const years = new Set()\n    dates.forEach(date => {\n      years.add(Math.floor(date / 10000))\n    })\n    return Array.from(years).sort((a, b) => a - b)\n  }\n\n  /**\n   * 生成数据统计元信息\n   */\n  generateMetadata(dates) {\n    const years = this.extractYears(dates)\n    return {\n      totalHolidays: Object.keys(holiday).length,\n      totalLegalDays: legal.length,\n      totalSwapDays: swap.length,\n      yearRange: {\n        start: years[0],\n        end: years[years.length - 1],\n        span: years.length\n      },\n      lastUpdated: new Date().toISOString()\n    }\n  }\n\n  /**\n   * 获取处理后的数据\n   */\n  getData() {\n    return this.processedData\n  }\n\n  /**\n   * 获取指定年份的数据\n   */\n  getYearData(year) {\n    return this.processedData.yearlyData.get(year) || null\n  }\n\n  /**\n   * 检查日期是否在数据范围内\n   */\n  isInRange(date) {\n    const { minDate, maxDate } = this.processedData.dataRange\n    return date >= minDate && date <= maxDate\n  }\n}\n\nexport default DataProcessor","/**\n * 高性能查询算法模块\n */\n\nclass QueryEngine {\n  constructor(data) {\n    this.data = data\n  }\n\n  /**\n   * 高效的日期范围查询 - O(log n) 复杂度\n   * 使用年份索引 + Set过滤替代逐日遍历\n   */\n  queryRange(startDate, endDate, filter = null) {\n    if (startDate > endDate) {\n      throw new Error('Start date must be less than or equal to end date')\n    }\n\n    const startYear = Math.floor(startDate / 10000)\n    const endYear = Math.floor(endDate / 10000)\n    const results = []\n\n    // 按年份范围查询，避免全量遍历\n    for (let year = startYear; year <= endYear; year++) {\n      const yearData = this.data.yearlyData.get(year)\n      if (!yearData) continue\n\n      // 根据过滤器类型选择对应的数据集\n      let targetSet\n      let dataSource\n      \n      switch (filter) {\n        case 'holiday':\n          targetSet = new Set(yearData.holidays.keys())\n          dataSource = yearData.holidays\n          break\n        case 'legal':\n          targetSet = yearData.legal\n          dataSource = yearData.holidays\n          break\n        case 'swap':\n          targetSet = yearData.swap\n          dataSource = yearData.holidays\n          break\n        default:\n          // 查询所有节假日\n          targetSet = new Set(yearData.holidays.keys())\n          dataSource = yearData.holidays\n      }\n\n      // 在年度数据中应用日期范围过滤\n      for (const date of targetSet) {\n        if (date >= startDate && date <= endDate) {\n          results.push(this.buildDayInfo(date, dataSource))\n        }\n      }\n    }\n\n    return results.sort((a, b) => a.date - b.date)\n  }\n\n  /**\n   * 快速的单日查询 - O(1) 复杂度\n   */\n  queryDay(date) {\n    if (!this.data.dataRange || date < this.data.dataRange.minDate || date > this.data.dataRange.maxDate) {\n      return this.buildInvalidDayInfo(date)\n    }\n\n    return this.buildDayInfo(date, this.data.holidayMap)\n  }\n\n  /**\n   * 批量日期查询优化\n   */\n  queryMultipleDays(dates) {\n    return dates.map(date => this.queryDay(date))\n  }\n\n  /**\n   * 智能范围统计 - 无需构建完整对象数组\n   */\n  countInRange(startDate, endDate, type = 'holiday') {\n    const startYear = Math.floor(startDate / 10000)\n    const endYear = Math.floor(endDate / 10000)\n    let count = 0\n\n    for (let year = startYear; year <= endYear; year++) {\n      const yearData = this.data.yearlyData.get(year)\n      if (!yearData) continue\n\n      let targetSet\n      switch (type) {\n        case 'legal':\n          targetSet = yearData.legal\n          break\n        case 'swap':\n          targetSet = yearData.swap\n          break\n        default:\n          targetSet = new Set(yearData.holidays.keys())\n      }\n\n      for (const date of targetSet) {\n        if (date >= startDate && date <= endDate) {\n          count++\n        }\n      }\n    }\n\n    return count\n  }\n\n  /**\n   * 按年份快速查询\n   */\n  queryYear(year, type = 'all') {\n    const yearData = this.data.yearlyData.get(year)\n    if (!yearData) return []\n\n    const results = []\n    \n    switch (type) {\n      case 'legal':\n        yearData.legal.forEach(date => {\n          results.push(this.buildDayInfo(date, yearData.holidays))\n        })\n        break\n      case 'swap':\n        yearData.swap.forEach(date => {\n          results.push(this.buildDayInfo(date, yearData.holidays))\n        })\n        break\n      default:\n        yearData.holidays.forEach((name, date) => {\n          results.push(this.buildDayInfo(date, yearData.holidays))\n        })\n    }\n\n    return results.sort((a, b) => a.date - b.date)\n  }\n\n  /**\n   * 构建标准的日期信息对象\n   */\n  buildDayInfo(date, dataSource) {\n    const name = (dataSource instanceof Map) \n      ? dataSource.get(date) || this.data.holidayMap.get(date) || '工作日'\n      : this.data.holidayMap.get(date) || '工作日'\n    \n    return {\n      date,\n      name,\n      isHoliday: this.data.holidaySet.has(date),\n      isLegal: this.data.legalSet.has(date),\n      isSwap: this.data.swapSet.has(date)\n    }\n  }\n\n  /**\n   * 构建无效日期信息\n   */\n  buildInvalidDayInfo(date) {\n    return {\n      date,\n      name: '超出数据范围',\n      isHoliday: false,\n      isLegal: false,\n      isSwap: false,\n      isValid: false\n    }\n  }\n\n  /**\n   * 获取节假日名称列表（去重）\n   */\n  getHolidayNames() {\n    const names = new Set()\n    this.data.holidayMap.forEach(name => names.add(name))\n    return Array.from(names).filter(name => name !== '工作日')\n  }\n\n  /**\n   * 按节假日名称查询所有相关日期\n   */\n  queryByHolidayName(holidayName) {\n    const results = []\n    this.data.holidayMap.forEach((name, date) => {\n      if (name === holidayName) {\n        results.push(this.buildDayInfo(date, this.data.holidayMap))\n      }\n    })\n    return results.sort((a, b) => a.date - b.date)\n  }\n}\n\nexport default QueryEngine","/**\n * 智能缓存管理器 - LRU缓存实现\n * 优化重复查询性能，特别是范围查询和批量操作\n */\n\nclass CacheManager {\n  constructor(maxSize = 1000) {\n    this.maxSize = maxSize\n    this.cache = new Map()\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      evictions: 0,\n      operations: 0\n    }\n  }\n\n  /**\n   * 获取缓存值\n   * @param {string} key - 缓存键\n   * @returns {*} 缓存值或undefined\n   */\n  get(key) {\n    this.stats.operations++\n    \n    if (this.cache.has(key)) {\n      // LRU策略：访问时移到最后\n      const value = this.cache.get(key)\n      this.cache.delete(key)\n      this.cache.set(key, value)\n      this.stats.hits++\n      return value\n    }\n    \n    this.stats.misses++\n    return undefined\n  }\n\n  /**\n   * 设置缓存值\n   * @param {string} key - 缓存键\n   * @param {*} value - 缓存值\n   */\n  set(key, value) {\n    this.stats.operations++\n    \n    // 如果已存在，先删除旧值\n    if (this.cache.has(key)) {\n      this.cache.delete(key)\n    } else if (this.cache.size >= this.maxSize) {\n      // 达到最大容量，删除最老的条目（Map中第一个）\n      const firstKey = this.cache.keys().next().value\n      this.cache.delete(firstKey)\n      this.stats.evictions++\n    }\n    \n    this.cache.set(key, value)\n  }\n\n  /**\n   * 检查缓存是否存在\n   * @param {string} key - 缓存键\n   * @returns {boolean}\n   */\n  has(key) {\n    return this.cache.has(key)\n  }\n\n  /**\n   * 删除指定缓存\n   * @param {string} key - 缓存键\n   * @returns {boolean} 是否删除成功\n   */\n  delete(key) {\n    return this.cache.delete(key)\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  clear() {\n    this.cache.clear()\n    this.resetStats()\n  }\n\n  /**\n   * 获取缓存大小\n   * @returns {number}\n   */\n  size() {\n    return this.cache.size\n  }\n\n  /**\n   * 获取缓存统计信息\n   * @returns {Object}\n   */\n  getStats() {\n    const hitRate = this.stats.operations > 0 \n      ? (this.stats.hits / this.stats.operations * 100).toFixed(2)\n      : 0\n\n    return {\n      ...this.stats,\n      hitRate: `${hitRate}%`,\n      size: this.cache.size,\n      maxSize: this.maxSize\n    }\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats() {\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      evictions: 0,\n      operations: 0\n    }\n  }\n\n  /**\n   * 批量预热缓存\n   * @param {Array} items - 预热数据数组 [{key, value}, ...]\n   */\n  warmup(items) {\n    items.forEach(({ key, value }) => {\n      this.set(key, value)\n    })\n  }\n\n  /**\n   * 获取缓存键列表（用于调试）\n   * @returns {Array}\n   */\n  keys() {\n    return Array.from(this.cache.keys())\n  }\n\n  /**\n   * 获取内存使用估算（粗略计算）\n   * @returns {Object}\n   */\n  getMemoryUsage() {\n    let totalSize = 0\n    \n    this.cache.forEach((value, key) => {\n      totalSize += this._estimateSize(key) + this._estimateSize(value)\n    })\n\n    return {\n      estimatedBytes: totalSize,\n      estimatedKB: (totalSize / 1024).toFixed(2),\n      entries: this.cache.size\n    }\n  }\n\n  /**\n   * 估算对象大小（简单实现）\n   * @private\n   */\n  _estimateSize(obj) {\n    if (typeof obj === 'string') {\n      return obj.length * 2 // Unicode字符大约2字节\n    }\n    if (typeof obj === 'number') {\n      return 8 // 64位数字\n    }\n    if (typeof obj === 'boolean') {\n      return 4\n    }\n    if (obj === null || obj === undefined) {\n      return 0\n    }\n    if (typeof obj === 'object') {\n      return JSON.stringify(obj).length * 2 // 粗略估算\n    }\n    return 0\n  }\n\n  /**\n   * 缓存健康检查\n   * @returns {Object}\n   */\n  healthCheck() {\n    const stats = this.getStats()\n    const memUsage = this.getMemoryUsage()\n    \n    return {\n      healthy: stats.hitRate > 30 && this.cache.size < this.maxSize,\n      hitRate: stats.hitRate,\n      utilizationRate: `${(this.cache.size / this.maxSize * 100).toFixed(2)}%`,\n      memoryUsage: memUsage.estimatedKB + ' KB',\n      recommendations: this._getRecommendations(stats)\n    }\n  }\n\n  /**\n   * 获取优化建议\n   * @private\n   */\n  _getRecommendations(stats) {\n    const recommendations = []\n    \n    if (stats.hitRate < 30) {\n      recommendations.push('缓存命中率较低，考虑调整缓存策略或增加缓存大小')\n    }\n    \n    if (stats.evictions > stats.hits) {\n      recommendations.push('缓存频繁淘汰，建议增加缓存容量')\n    }\n    \n    if (this.cache.size === this.maxSize) {\n      recommendations.push('缓存已满，考虑增加maxSize参数')\n    }\n    \n    return recommendations\n  }\n}\n\nexport default CacheManager","/**\n * Festival_chn - 高性能中国节假日查询库\n * \n * 特性：\n * - O(1) 单日查询，O(log n) 范围查询\n * - 智能缓存和数据预处理\n * - 完整的输入验证和错误处理\n * - 支持批量操作和年度查询\n */\n\nimport DataProcessor from './data-processor.js'\nimport QueryEngine from './query-engine.js'\nimport CacheManager from './cache-manager.js'\n\nclass Festival {\n  constructor(options = {}) {\n    // 初始化配置\n    this.config = {\n      enableCache: options.enableCache !== false, // 默认启用缓存\n      cacheSize: options.cacheSize || 1000,\n      strictMode: options.strictMode || false, // 严格模式下抛出异常\n      ...options\n    }\n\n    // 初始化数据处理器\n    this.dataProcessor = new DataProcessor()\n    this.data = this.dataProcessor.getData()\n    \n    // 初始化查询引擎\n    this.queryEngine = new QueryEngine(this.data)\n    \n    // 初始化缓存管理器\n    this.cacheManager = this.config.enableCache \n      ? new CacheManager(this.config.cacheSize)\n      : null\n\n    // 性能统计\n    this.stats = {\n      queries: 0,\n      cacheHits: 0,\n      errors: 0\n    }\n  }\n\n  // ==================== 核心查询API ====================\n\n  /**\n   * 查询指定日期的完整信息\n   * @param {number|string} date - 日期，格式为 YYYYMMDD\n   * @returns {Object} 日期信息对象\n   */\n  day(date) {\n    try {\n      const normalizedDate = this._validateAndNormalizeDate(date)\n      this.stats.queries++\n\n      // 检查缓存\n      if (this.cacheManager) {\n        const cached = this.cacheManager.get(`day:${normalizedDate}`)\n        if (cached) {\n          this.stats.cacheHits++\n          return cached\n        }\n      }\n\n      const result = this.queryEngine.queryDay(normalizedDate)\n      \n      // 缓存结果\n      if (this.cacheManager && result.isValid !== false) {\n        this.cacheManager.set(`day:${normalizedDate}`, result)\n      }\n\n      return result\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, date)\n    }\n  }\n\n  /**\n   * 获取日期的节假日名称\n   * @param {number|string} date - 日期\n   * @returns {string} 节假日名称\n   */\n  name(date) {\n    const dayInfo = this.day(date)\n    return dayInfo.name || '工作日'\n  }\n\n  /**\n   * 判断是否为节假日\n   * @param {number|string} date - 日期\n   * @returns {boolean}\n   */\n  isHoliday(date) {\n    const dayInfo = this.day(date)\n    return dayInfo.isHoliday || false\n  }\n\n  /**\n   * 判断是否为法定节假日\n   * @param {number|string} date - 日期\n   * @returns {boolean}\n   */\n  isLegal(date) {\n    const dayInfo = this.day(date)\n    return dayInfo.isLegal || false\n  }\n\n  /**\n   * 判断是否为调休日（工作日）\n   * @param {number|string} date - 日期\n   * @returns {boolean}\n   */\n  isSwap(date) {\n    const dayInfo = this.day(date)\n    return dayInfo.isSwap || false\n  }\n\n  // ==================== 范围查询API ====================\n\n  /**\n   * 查询日期范围内的所有节假日信息\n   * @param {number|string} startDate - 开始日期\n   * @param {number|string} endDate - 结束日期\n   * @returns {Array} 日期信息数组\n   */\n  getDaysInRange(startDate, endDate) {\n    try {\n      const start = this._validateAndNormalizeDate(startDate)\n      const end = this._validateAndNormalizeDate(endDate)\n      \n      const cacheKey = `range:${start}-${end}`\n      if (this.cacheManager) {\n        const cached = this.cacheManager.get(cacheKey)\n        if (cached) {\n          this.stats.cacheHits++\n          return cached\n        }\n      }\n\n      const result = this.queryEngine.queryRange(start, end)\n      \n      if (this.cacheManager) {\n        this.cacheManager.set(cacheKey, result)\n      }\n\n      return result\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, [startDate, endDate])\n    }\n  }\n\n  /**\n   * 查询日期范围内的法定节假日\n   * @param {number|string} startDate - 开始日期\n   * @param {number|string} endDate - 结束日期\n   * @returns {Array} 法定节假日数组\n   */\n  getLegalHolidaysInRange(startDate, endDate) {\n    try {\n      const start = this._validateAndNormalizeDate(startDate)\n      const end = this._validateAndNormalizeDate(endDate)\n      \n      return this.queryEngine.queryRange(start, end, 'legal')\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, [startDate, endDate])\n    }\n  }\n\n  /**\n   * 查询日期范围内的调休日\n   * @param {number|string} startDate - 开始日期\n   * @param {number|string} endDate - 结束日期\n   * @returns {Array} 调休日数组\n   */\n  getSwapHolidaysInRange(startDate, endDate) {\n    try {\n      const start = this._validateAndNormalizeDate(startDate)\n      const end = this._validateAndNormalizeDate(endDate)\n      \n      return this.queryEngine.queryRange(start, end, 'swap')\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, [startDate, endDate])\n    }\n  }\n\n  /**\n   * 统计日期范围内的节假日天数\n   * @param {number|string} startDate - 开始日期\n   * @param {number|string} endDate - 结束日期\n   * @param {string} type - 类型：'holiday', 'legal', 'swap'\n   * @returns {number} 天数\n   */\n  countHolidaysInRange(startDate, endDate, type = 'holiday') {\n    try {\n      const start = this._validateAndNormalizeDate(startDate)\n      const end = this._validateAndNormalizeDate(endDate)\n      \n      return this.queryEngine.countInRange(start, end, type)\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, [startDate, endDate])\n    }\n  }\n\n  // ==================== 新增高级API ====================\n\n  /**\n   * 批量查询多个日期\n   * @param {Array} dates - 日期数组\n   * @returns {Array} 日期信息数组\n   */\n  getDays(dates) {\n    if (!Array.isArray(dates)) {\n      throw new Error('参数必须是日期数组')\n    }\n\n    return dates.map(date => this.day(date))\n  }\n\n  /**\n   * 查询指定年份的所有节假日\n   * @param {number} year - 年份\n   * @param {string} type - 类型：'all', 'legal', 'swap'\n   * @returns {Array} 节假日数组\n   */\n  getYearHolidays(year, type = 'all') {\n    try {\n      this._validateYear(year)\n      return this.queryEngine.queryYear(year, type)\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, year)\n    }\n  }\n\n  /**\n   * 按节假日名称查询所有相关日期\n   * @param {string} holidayName - 节假日名称\n   * @returns {Array} 日期数组\n   */\n  getDatesByHolidayName(holidayName) {\n    return this.queryEngine.queryByHolidayName(holidayName)\n  }\n\n  /**\n   * 获取所有节假日名称列表\n   * @returns {Array} 节假日名称数组\n   */\n  getHolidayNames() {\n    return this.queryEngine.getHolidayNames()\n  }\n\n  // ==================== 工具方法 ====================\n\n  /**\n   * 获取数据统计信息\n   * @returns {Object} 统计信息\n   */\n  getDataInfo() {\n    return {\n      ...this.data.metadata,\n      stats: { ...this.stats },\n      dataRange: this.data.dataRange,\n      cacheEnabled: !!this.cacheManager\n    }\n  }\n\n  /**\n   * 清空缓存\n   */\n  clearCache() {\n    if (this.cacheManager) {\n      this.cacheManager.clear()\n    }\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats() {\n    this.stats = {\n      queries: 0,\n      cacheHits: 0,\n      errors: 0\n    }\n  }\n\n  // ==================== 私有方法 ====================\n\n  /**\n   * 验证并标准化日期\n   * @private\n   */\n  _validateAndNormalizeDate(date) {\n    if (date == null) {\n      throw new Error('日期不能为空')\n    }\n\n    const numDate = Number(date)\n    \n    if (isNaN(numDate)) {\n      throw new Error(`无效的日期格式: ${date}`)\n    }\n\n    // 基本格式验证\n    if (numDate < 19700101 || numDate > 99991231) {\n      throw new Error(`日期超出有效范围: ${date}`)\n    }\n\n    // 详细日期格式验证\n    const dateStr = numDate.toString()\n    if (dateStr.length !== 8) {\n      throw new Error(`日期格式必须为8位数字YYYYMMDD: ${date}`)\n    }\n\n    const year = Math.floor(numDate / 10000)\n    const month = Math.floor((numDate % 10000) / 100)\n    const day = numDate % 100\n\n    if (month < 1 || month > 12) {\n      throw new Error(`无效的月份: ${month}`)\n    }\n\n    if (day < 1 || day > 31) {\n      throw new Error(`无效的日期: ${day}`)\n    }\n\n    return numDate\n  }\n\n  /**\n   * 验证年份\n   * @private\n   */\n  _validateYear(year) {\n    const numYear = Number(year)\n    if (isNaN(numYear) || numYear < 1970 || numYear > 9999) {\n      throw new Error(`无效的年份: ${year}`)\n    }\n    return numYear\n  }\n\n  /**\n   * 错误处理\n   * @private\n   */\n  _handleError(error, input) {\n    if (this.config.strictMode) {\n      throw error\n    }\n\n    console.warn(`Festival查询错误: ${error.message}, 输入: ${JSON.stringify(input)}`)\n    \n    // 返回默认的错误结果\n    return {\n      date: Number(input) || 0,\n      name: '查询错误',\n      isHoliday: false,\n      isLegal: false,\n      isSwap: false,\n      error: error.message\n    }\n  }\n}\n\n// 兼容性：保持原有的导出方式\nexport default Festival\nexport { Festival }","/**\n * Festival_chn - 高性能中国节假日查询库\n * 重构版本入口文件\n */\n\nimport Festival from './festival.js'\n\n// 创建默认实例\nconst festival = new Festival()\n\n// 导出类和默认实例\nexport { Festival }\nexport default festival\n\n// 兼容性：提供全局访问方式\nif (typeof window !== 'undefined') {\n  window.Festival = Festival\n  window.festival = festival\n}\n\n// Node.js 环境兼容\nif (typeof global !== 'undefined') {\n  global.Festival = Festival\n  global.festival = festival\n}"],"names":[],"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"}