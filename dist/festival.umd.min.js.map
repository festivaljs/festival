{"version":3,"file":"festival.umd.min.js","sources":["../data-processor.js","../query-engine.js","../cache-manager.js","../festival.js","../index.js"],"sourcesContent":["/**\n * 数据预处理器 - 优化数据结构以提升查询性能\n */\n\nimport holiday from './chn/holiday.json' with { type: 'json' }\nimport legal from './chn/legal.json' with { type: 'json' }\nimport swap from './chn/swap.json' with { type: 'json' }\n\nclass DataProcessor {\n  constructor() {\n    this.processedData = this.preprocessData()\n  }\n\n  /**\n   * 预处理数据，构建高效的查询索引\n   */\n  preprocessData() {\n    // 构建快速查询的Set结构\n    const holidaySet = new Set(Object.keys(holiday).map(Number))\n    const legalSet = new Set(legal.map(Number))\n    const swapSet = new Set(swap.map(Number))\n    \n    // 按年份组织数据，提升范围查询性能\n    const yearlyData = this.buildYearlyIndex(holiday, legal, swap)\n    \n    // 计算数据边界\n    const allDates = [...holidaySet, ...legalSet, ...swapSet]\n    const dataRange = {\n      minDate: Math.min(...allDates),\n      maxDate: Math.max(...allDates),\n      years: this.extractYears(allDates)\n    }\n\n    return {\n      // 原始查询集合\n      holidayMap: new Map(Object.entries(holiday).map(([date, name]) => [Number(date), name])),\n      holidaySet,\n      legalSet,\n      swapSet,\n      \n      // 优化索引\n      yearlyData,\n      dataRange,\n      \n      // 元数据\n      metadata: this.generateMetadata(allDates)\n    }\n  }\n\n  /**\n   * 按年份构建索引，优化年度范围查询\n   */\n  buildYearlyIndex(holiday, legal, swap) {\n    const yearlyData = new Map()\n    \n    // 处理节假日\n    Object.entries(holiday).forEach(([dateStr, name]) => {\n      const date = Number(dateStr)\n      const year = Math.floor(date / 10000)\n      \n      if (!yearlyData.has(year)) {\n        yearlyData.set(year, {\n          holidays: new Map(),\n          legal: new Set(),\n          swap: new Set()\n        })\n      }\n      \n      yearlyData.get(year).holidays.set(date, name)\n    })\n    \n    // 处理法定节假日\n    legal.forEach(date => {\n      const year = Math.floor(date / 10000)\n      if (yearlyData.has(year)) {\n        yearlyData.get(year).legal.add(date)\n      }\n    })\n    \n    // 处理调休日\n    swap.forEach(date => {\n      const year = Math.floor(date / 10000)\n      if (yearlyData.has(year)) {\n        yearlyData.get(year).swap.add(date)\n      }\n    })\n    \n    return yearlyData\n  }\n\n  /**\n   * 提取所有涉及的年份\n   */\n  extractYears(dates) {\n    const years = new Set()\n    dates.forEach(date => {\n      years.add(Math.floor(date / 10000))\n    })\n    return Array.from(years).sort((a, b) => a - b)\n  }\n\n  /**\n   * 生成数据统计元信息\n   */\n  generateMetadata(dates) {\n    const years = this.extractYears(dates)\n    return {\n      totalHolidays: Object.keys(holiday).length,\n      totalLegalDays: legal.length,\n      totalSwapDays: swap.length,\n      yearRange: {\n        start: years[0],\n        end: years[years.length - 1],\n        span: years.length\n      },\n      lastUpdated: new Date().toISOString()\n    }\n  }\n\n  /**\n   * 获取处理后的数据\n   */\n  getData() {\n    return this.processedData\n  }\n\n  /**\n   * 获取指定年份的数据\n   */\n  getYearData(year) {\n    return this.processedData.yearlyData.get(year) || null\n  }\n\n  /**\n   * 检查日期是否在数据范围内\n   */\n  isInRange(date) {\n    const { minDate, maxDate } = this.processedData.dataRange\n    return date >= minDate && date <= maxDate\n  }\n}\n\nexport default DataProcessor","/**\n * 高性能查询算法模块\n */\n\nclass QueryEngine {\n  constructor(data) {\n    this.data = data\n  }\n\n  /**\n   * 高效的日期范围查询 - O(log n) 复杂度\n   * 使用年份索引 + Set过滤替代逐日遍历\n   */\n  queryRange(startDate, endDate, filter = null) {\n    if (startDate > endDate) {\n      throw new Error('Start date must be less than or equal to end date')\n    }\n\n    const startYear = Math.floor(startDate / 10000)\n    const endYear = Math.floor(endDate / 10000)\n    const results = []\n\n    // 按年份范围查询，避免全量遍历\n    for (let year = startYear; year <= endYear; year++) {\n      const yearData = this.data.yearlyData.get(year)\n      if (!yearData) continue\n\n      // 根据过滤器类型选择对应的数据集\n      let targetSet\n      let dataSource\n      \n      switch (filter) {\n        case 'holiday':\n          targetSet = new Set(yearData.holidays.keys())\n          dataSource = yearData.holidays\n          break\n        case 'legal':\n          targetSet = yearData.legal\n          dataSource = yearData.holidays\n          break\n        case 'swap':\n          targetSet = yearData.swap\n          dataSource = yearData.holidays\n          break\n        default:\n          // 查询所有节假日\n          targetSet = new Set(yearData.holidays.keys())\n          dataSource = yearData.holidays\n      }\n\n      // 在年度数据中应用日期范围过滤\n      for (const date of targetSet) {\n        if (date >= startDate && date <= endDate) {\n          results.push(this.buildDayInfo(date, dataSource))\n        }\n      }\n    }\n\n    return results.sort((a, b) => a.date - b.date)\n  }\n\n  /**\n   * 快速的单日查询 - O(1) 复杂度\n   */\n  queryDay(date) {\n    if (!this.data.dataRange || date < this.data.dataRange.minDate || date > this.data.dataRange.maxDate) {\n      return this.buildInvalidDayInfo(date)\n    }\n\n    return this.buildDayInfo(date, this.data.holidayMap)\n  }\n\n  /**\n   * 批量日期查询优化\n   */\n  queryMultipleDays(dates) {\n    return dates.map(date => this.queryDay(date))\n  }\n\n  /**\n   * 智能范围统计 - 无需构建完整对象数组\n   */\n  countInRange(startDate, endDate, type = 'holiday') {\n    const startYear = Math.floor(startDate / 10000)\n    const endYear = Math.floor(endDate / 10000)\n    let count = 0\n\n    for (let year = startYear; year <= endYear; year++) {\n      const yearData = this.data.yearlyData.get(year)\n      if (!yearData) continue\n\n      let targetSet\n      switch (type) {\n        case 'legal':\n          targetSet = yearData.legal\n          break\n        case 'swap':\n          targetSet = yearData.swap\n          break\n        default:\n          targetSet = new Set(yearData.holidays.keys())\n      }\n\n      for (const date of targetSet) {\n        if (date >= startDate && date <= endDate) {\n          count++\n        }\n      }\n    }\n\n    return count\n  }\n\n  /**\n   * 按年份快速查询\n   */\n  queryYear(year, type = 'all') {\n    const yearData = this.data.yearlyData.get(year)\n    if (!yearData) return []\n\n    const results = []\n    \n    switch (type) {\n      case 'legal':\n        yearData.legal.forEach(date => {\n          results.push(this.buildDayInfo(date, yearData.holidays))\n        })\n        break\n      case 'swap':\n        yearData.swap.forEach(date => {\n          results.push(this.buildDayInfo(date, yearData.holidays))\n        })\n        break\n      default:\n        yearData.holidays.forEach((name, date) => {\n          results.push(this.buildDayInfo(date, yearData.holidays))\n        })\n    }\n\n    return results.sort((a, b) => a.date - b.date)\n  }\n\n  /**\n   * 构建标准的日期信息对象\n   */\n  buildDayInfo(date, dataSource) {\n    const name = (dataSource instanceof Map) \n      ? dataSource.get(date) || this.data.holidayMap.get(date) || '工作日'\n      : this.data.holidayMap.get(date) || '工作日'\n    \n    return {\n      date,\n      name,\n      isHoliday: this.data.holidaySet.has(date),\n      isLegal: this.data.legalSet.has(date),\n      isSwap: this.data.swapSet.has(date)\n    }\n  }\n\n  /**\n   * 构建无效日期信息\n   */\n  buildInvalidDayInfo(date) {\n    return {\n      date,\n      name: '超出数据范围',\n      isHoliday: false,\n      isLegal: false,\n      isSwap: false,\n      isValid: false\n    }\n  }\n\n  /**\n   * 获取节假日名称列表（去重）\n   */\n  getHolidayNames() {\n    const names = new Set()\n    this.data.holidayMap.forEach(name => names.add(name))\n    return Array.from(names).filter(name => name !== '工作日')\n  }\n\n  /**\n   * 按节假日名称查询所有相关日期\n   */\n  queryByHolidayName(holidayName) {\n    const results = []\n    this.data.holidayMap.forEach((name, date) => {\n      if (name === holidayName) {\n        results.push(this.buildDayInfo(date, this.data.holidayMap))\n      }\n    })\n    return results.sort((a, b) => a.date - b.date)\n  }\n}\n\nexport default QueryEngine","/**\n * 智能缓存管理器 - LRU缓存实现\n * 优化重复查询性能，特别是范围查询和批量操作\n */\n\nclass CacheManager {\n  constructor(maxSize = 1000) {\n    this.maxSize = maxSize\n    this.cache = new Map()\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      evictions: 0,\n      operations: 0\n    }\n  }\n\n  /**\n   * 获取缓存值\n   * @param {string} key - 缓存键\n   * @returns {*} 缓存值或undefined\n   */\n  get(key) {\n    this.stats.operations++\n    \n    if (this.cache.has(key)) {\n      // LRU策略：访问时移到最后\n      const value = this.cache.get(key)\n      this.cache.delete(key)\n      this.cache.set(key, value)\n      this.stats.hits++\n      return value\n    }\n    \n    this.stats.misses++\n    return undefined\n  }\n\n  /**\n   * 设置缓存值\n   * @param {string} key - 缓存键\n   * @param {*} value - 缓存值\n   */\n  set(key, value) {\n    this.stats.operations++\n    \n    // 如果已存在，先删除旧值\n    if (this.cache.has(key)) {\n      this.cache.delete(key)\n    } else if (this.cache.size >= this.maxSize) {\n      // 达到最大容量，删除最老的条目（Map中第一个）\n      const firstKey = this.cache.keys().next().value\n      this.cache.delete(firstKey)\n      this.stats.evictions++\n    }\n    \n    this.cache.set(key, value)\n  }\n\n  /**\n   * 检查缓存是否存在\n   * @param {string} key - 缓存键\n   * @returns {boolean}\n   */\n  has(key) {\n    return this.cache.has(key)\n  }\n\n  /**\n   * 删除指定缓存\n   * @param {string} key - 缓存键\n   * @returns {boolean} 是否删除成功\n   */\n  delete(key) {\n    return this.cache.delete(key)\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  clear() {\n    this.cache.clear()\n    this.resetStats()\n  }\n\n  /**\n   * 获取缓存大小\n   * @returns {number}\n   */\n  size() {\n    return this.cache.size\n  }\n\n  /**\n   * 获取缓存统计信息\n   * @returns {Object}\n   */\n  getStats() {\n    const hitRate = this.stats.operations > 0 \n      ? (this.stats.hits / this.stats.operations * 100).toFixed(2)\n      : 0\n\n    return {\n      ...this.stats,\n      hitRate: `${hitRate}%`,\n      size: this.cache.size,\n      maxSize: this.maxSize\n    }\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats() {\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      evictions: 0,\n      operations: 0\n    }\n  }\n\n  /**\n   * 批量预热缓存\n   * @param {Array} items - 预热数据数组 [{key, value}, ...]\n   */\n  warmup(items) {\n    items.forEach(({ key, value }) => {\n      this.set(key, value)\n    })\n  }\n\n  /**\n   * 获取缓存键列表（用于调试）\n   * @returns {Array}\n   */\n  keys() {\n    return Array.from(this.cache.keys())\n  }\n\n  /**\n   * 获取内存使用估算（粗略计算）\n   * @returns {Object}\n   */\n  getMemoryUsage() {\n    let totalSize = 0\n    \n    this.cache.forEach((value, key) => {\n      totalSize += this._estimateSize(key) + this._estimateSize(value)\n    })\n\n    return {\n      estimatedBytes: totalSize,\n      estimatedKB: (totalSize / 1024).toFixed(2),\n      entries: this.cache.size\n    }\n  }\n\n  /**\n   * 估算对象大小（简单实现）\n   * @private\n   */\n  _estimateSize(obj) {\n    if (typeof obj === 'string') {\n      return obj.length * 2 // Unicode字符大约2字节\n    }\n    if (typeof obj === 'number') {\n      return 8 // 64位数字\n    }\n    if (typeof obj === 'boolean') {\n      return 4\n    }\n    if (obj === null || obj === undefined) {\n      return 0\n    }\n    if (typeof obj === 'object') {\n      return JSON.stringify(obj).length * 2 // 粗略估算\n    }\n    return 0\n  }\n\n  /**\n   * 缓存健康检查\n   * @returns {Object}\n   */\n  healthCheck() {\n    const stats = this.getStats()\n    const memUsage = this.getMemoryUsage()\n    \n    return {\n      healthy: stats.hitRate > 30 && this.cache.size < this.maxSize,\n      hitRate: stats.hitRate,\n      utilizationRate: `${(this.cache.size / this.maxSize * 100).toFixed(2)}%`,\n      memoryUsage: memUsage.estimatedKB + ' KB',\n      recommendations: this._getRecommendations(stats)\n    }\n  }\n\n  /**\n   * 获取优化建议\n   * @private\n   */\n  _getRecommendations(stats) {\n    const recommendations = []\n    \n    if (stats.hitRate < 30) {\n      recommendations.push('缓存命中率较低，考虑调整缓存策略或增加缓存大小')\n    }\n    \n    if (stats.evictions > stats.hits) {\n      recommendations.push('缓存频繁淘汰，建议增加缓存容量')\n    }\n    \n    if (this.cache.size === this.maxSize) {\n      recommendations.push('缓存已满，考虑增加maxSize参数')\n    }\n    \n    return recommendations\n  }\n}\n\nexport default CacheManager","/**\n * Festival_chn - 高性能中国节假日查询库\n * \n * 特性：\n * - O(1) 单日查询，O(log n) 范围查询\n * - 智能缓存和数据预处理\n * - 完整的输入验证和错误处理\n * - 支持批量操作和年度查询\n */\n\nimport DataProcessor from './data-processor.js'\nimport QueryEngine from './query-engine.js'\nimport CacheManager from './cache-manager.js'\n\nclass Festival {\n  constructor(options = {}) {\n    // 初始化配置\n    this.config = {\n      enableCache: options.enableCache !== false, // 默认启用缓存\n      cacheSize: options.cacheSize || 1000,\n      strictMode: options.strictMode || false, // 严格模式下抛出异常\n      ...options\n    }\n\n    // 初始化数据处理器\n    this.dataProcessor = new DataProcessor()\n    this.data = this.dataProcessor.getData()\n    \n    // 初始化查询引擎\n    this.queryEngine = new QueryEngine(this.data)\n    \n    // 初始化缓存管理器\n    this.cacheManager = this.config.enableCache \n      ? new CacheManager(this.config.cacheSize)\n      : null\n\n    // 性能统计\n    this.stats = {\n      queries: 0,\n      cacheHits: 0,\n      errors: 0\n    }\n  }\n\n  // ==================== 核心查询API ====================\n\n  /**\n   * 查询指定日期的完整信息\n   * @param {number|string} date - 日期，格式为 YYYYMMDD\n   * @returns {Object} 日期信息对象\n   */\n  day(date) {\n    try {\n      const normalizedDate = this._validateAndNormalizeDate(date)\n      this.stats.queries++\n\n      // 检查缓存\n      if (this.cacheManager) {\n        const cached = this.cacheManager.get(`day:${normalizedDate}`)\n        if (cached) {\n          this.stats.cacheHits++\n          return cached\n        }\n      }\n\n      const result = this.queryEngine.queryDay(normalizedDate)\n      \n      // 缓存结果\n      if (this.cacheManager && result.isValid !== false) {\n        this.cacheManager.set(`day:${normalizedDate}`, result)\n      }\n\n      return result\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, date)\n    }\n  }\n\n  /**\n   * 获取日期的节假日名称\n   * @param {number|string} date - 日期\n   * @returns {string} 节假日名称\n   */\n  name(date) {\n    const dayInfo = this.day(date)\n    return dayInfo.name || '工作日'\n  }\n\n  /**\n   * 判断是否为节假日\n   * @param {number|string} date - 日期\n   * @returns {boolean}\n   */\n  isHoliday(date) {\n    const dayInfo = this.day(date)\n    return dayInfo.isHoliday || false\n  }\n\n  /**\n   * 判断是否为法定节假日\n   * @param {number|string} date - 日期\n   * @returns {boolean}\n   */\n  isLegal(date) {\n    const dayInfo = this.day(date)\n    return dayInfo.isLegal || false\n  }\n\n  /**\n   * 判断是否为调休日（工作日）\n   * @param {number|string} date - 日期\n   * @returns {boolean}\n   */\n  isSwap(date) {\n    const dayInfo = this.day(date)\n    return dayInfo.isSwap || false\n  }\n\n  // ==================== 范围查询API ====================\n\n  /**\n   * 查询日期范围内的所有节假日信息\n   * @param {number|string} startDate - 开始日期\n   * @param {number|string} endDate - 结束日期\n   * @returns {Array} 日期信息数组\n   */\n  getDaysInRange(startDate, endDate) {\n    try {\n      const start = this._validateAndNormalizeDate(startDate)\n      const end = this._validateAndNormalizeDate(endDate)\n      \n      const cacheKey = `range:${start}-${end}`\n      if (this.cacheManager) {\n        const cached = this.cacheManager.get(cacheKey)\n        if (cached) {\n          this.stats.cacheHits++\n          return cached\n        }\n      }\n\n      const result = this.queryEngine.queryRange(start, end)\n      \n      if (this.cacheManager) {\n        this.cacheManager.set(cacheKey, result)\n      }\n\n      return result\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, [startDate, endDate])\n    }\n  }\n\n  /**\n   * 查询日期范围内的法定节假日\n   * @param {number|string} startDate - 开始日期\n   * @param {number|string} endDate - 结束日期\n   * @returns {Array} 法定节假日数组\n   */\n  getLegalHolidaysInRange(startDate, endDate) {\n    try {\n      const start = this._validateAndNormalizeDate(startDate)\n      const end = this._validateAndNormalizeDate(endDate)\n      \n      return this.queryEngine.queryRange(start, end, 'legal')\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, [startDate, endDate])\n    }\n  }\n\n  /**\n   * 查询日期范围内的调休日\n   * @param {number|string} startDate - 开始日期\n   * @param {number|string} endDate - 结束日期\n   * @returns {Array} 调休日数组\n   */\n  getSwapHolidaysInRange(startDate, endDate) {\n    try {\n      const start = this._validateAndNormalizeDate(startDate)\n      const end = this._validateAndNormalizeDate(endDate)\n      \n      return this.queryEngine.queryRange(start, end, 'swap')\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, [startDate, endDate])\n    }\n  }\n\n  /**\n   * 统计日期范围内的节假日天数\n   * @param {number|string} startDate - 开始日期\n   * @param {number|string} endDate - 结束日期\n   * @param {string} type - 类型：'holiday', 'legal', 'swap'\n   * @returns {number} 天数\n   */\n  countHolidaysInRange(startDate, endDate, type = 'holiday') {\n    try {\n      const start = this._validateAndNormalizeDate(startDate)\n      const end = this._validateAndNormalizeDate(endDate)\n      \n      return this.queryEngine.countInRange(start, end, type)\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, [startDate, endDate])\n    }\n  }\n\n  // ==================== 新增高级API ====================\n\n  /**\n   * 批量查询多个日期\n   * @param {Array} dates - 日期数组\n   * @returns {Array} 日期信息数组\n   */\n  getDays(dates) {\n    if (!Array.isArray(dates)) {\n      throw new Error('参数必须是日期数组')\n    }\n\n    return dates.map(date => this.day(date))\n  }\n\n  /**\n   * 查询指定年份的所有节假日\n   * @param {number} year - 年份\n   * @param {string} type - 类型：'all', 'legal', 'swap'\n   * @returns {Array} 节假日数组\n   */\n  getYearHolidays(year, type = 'all') {\n    try {\n      this._validateYear(year)\n      return this.queryEngine.queryYear(year, type)\n    } catch (error) {\n      this.stats.errors++\n      return this._handleError(error, year)\n    }\n  }\n\n  /**\n   * 按节假日名称查询所有相关日期\n   * @param {string} holidayName - 节假日名称\n   * @returns {Array} 日期数组\n   */\n  getDatesByHolidayName(holidayName) {\n    return this.queryEngine.queryByHolidayName(holidayName)\n  }\n\n  /**\n   * 获取所有节假日名称列表\n   * @returns {Array} 节假日名称数组\n   */\n  getHolidayNames() {\n    return this.queryEngine.getHolidayNames()\n  }\n\n  // ==================== 工具方法 ====================\n\n  /**\n   * 获取数据统计信息\n   * @returns {Object} 统计信息\n   */\n  getDataInfo() {\n    return {\n      ...this.data.metadata,\n      stats: { ...this.stats },\n      dataRange: this.data.dataRange,\n      cacheEnabled: !!this.cacheManager\n    }\n  }\n\n  /**\n   * 清空缓存\n   */\n  clearCache() {\n    if (this.cacheManager) {\n      this.cacheManager.clear()\n    }\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats() {\n    this.stats = {\n      queries: 0,\n      cacheHits: 0,\n      errors: 0\n    }\n  }\n\n  // ==================== 私有方法 ====================\n\n  /**\n   * 验证并标准化日期\n   * @private\n   */\n  _validateAndNormalizeDate(date) {\n    if (date == null) {\n      throw new Error('日期不能为空')\n    }\n\n    const numDate = Number(date)\n    \n    if (isNaN(numDate)) {\n      throw new Error(`无效的日期格式: ${date}`)\n    }\n\n    // 基本格式验证\n    if (numDate < 19700101 || numDate > 99991231) {\n      throw new Error(`日期超出有效范围: ${date}`)\n    }\n\n    // 详细日期格式验证\n    const dateStr = numDate.toString()\n    if (dateStr.length !== 8) {\n      throw new Error(`日期格式必须为8位数字YYYYMMDD: ${date}`)\n    }\n\n    const year = Math.floor(numDate / 10000)\n    const month = Math.floor((numDate % 10000) / 100)\n    const day = numDate % 100\n\n    if (month < 1 || month > 12) {\n      throw new Error(`无效的月份: ${month}`)\n    }\n\n    if (day < 1 || day > 31) {\n      throw new Error(`无效的日期: ${day}`)\n    }\n\n    return numDate\n  }\n\n  /**\n   * 验证年份\n   * @private\n   */\n  _validateYear(year) {\n    const numYear = Number(year)\n    if (isNaN(numYear) || numYear < 1970 || numYear > 9999) {\n      throw new Error(`无效的年份: ${year}`)\n    }\n    return numYear\n  }\n\n  /**\n   * 错误处理\n   * @private\n   */\n  _handleError(error, input) {\n    if (this.config.strictMode) {\n      throw error\n    }\n\n    console.warn(`Festival查询错误: ${error.message}, 输入: ${JSON.stringify(input)}`)\n    \n    // 返回默认的错误结果\n    return {\n      date: Number(input) || 0,\n      name: '查询错误',\n      isHoliday: false,\n      isLegal: false,\n      isSwap: false,\n      error: error.message\n    }\n  }\n}\n\n// 兼容性：保持原有的导出方式\nexport default Festival\nexport { Festival }","/**\n * Festival_chn - 高性能中国节假日查询库\n * 重构版本入口文件\n */\n\nimport Festival from './festival.js'\n\n// 创建默认实例\nconst festival = new Festival()\n\n// 导出类和默认实例\nexport { Festival }\nexport default festival\n\n// 兼容性：提供全局访问方式\nif (typeof window !== 'undefined') {\n  window.Festival = Festival\n  window.festival = festival\n}\n\n// Node.js 环境兼容\nif (typeof global !== 'undefined') {\n  global.Festival = Festival\n  global.festival = festival\n}"],"names":["DataProcessor","constructor","this","processedData","preprocessData","holidaySet","Set","Object","keys","holiday","map","Number","legalSet","legal","swapSet","swap","yearlyData","buildYearlyIndex","allDates","dataRange","minDate","Math","min","maxDate","max","years","extractYears","holidayMap","Map","entries","date","name","metadata","generateMetadata","forEach","dateStr","year","floor","has","set","holidays","get","add","dates","Array","from","sort","a","b","totalHolidays","length","totalLegalDays","totalSwapDays","yearRange","start","end","span","lastUpdated","Date","toISOString","getData","getYearData","isInRange","QueryEngine","data","queryRange","startDate","endDate","filter","Error","startYear","endYear","results","yearData","targetSet","dataSource","push","buildDayInfo","queryDay","buildInvalidDayInfo","queryMultipleDays","countInRange","type","count","queryYear","isHoliday","isLegal","isSwap","isValid","getHolidayNames","names","queryByHolidayName","holidayName","CacheManager","maxSize","cache","stats","hits","misses","evictions","operations","key","value","delete","size","firstKey","next","clear","resetStats","getStats","hitRate","toFixed","warmup","items","getMemoryUsage","totalSize","_estimateSize","estimatedBytes","estimatedKB","obj","JSON","stringify","healthCheck","memUsage","healthy","utilizationRate","memoryUsage","recommendations","_getRecommendations","Festival","options","config","enableCache","cacheSize","strictMode","dataProcessor","queryEngine","cacheManager","queries","cacheHits","errors","day","normalizedDate","_validateAndNormalizeDate","cached","result","error","_handleError","getDaysInRange","cacheKey","getLegalHolidaysInRange","getSwapHolidaysInRange","countHolidaysInRange","getDays","isArray","getYearHolidays","_validateYear","getDatesByHolidayName","getDataInfo","cacheEnabled","clearCache","numDate","isNaN","toString","month","numYear","input","message","festival","window","global"],"mappings":"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"}